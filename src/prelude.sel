#!
# (wip placeholder prelude)

def unreachable:: [panic: entered unreachable code:],

def apply: (a -> b) -> a -> b
    apply argument to function; 'apply f x' is equivalent to 'f x':
    [let f f],

def compose:
    compose two function; 'compose one two' is equivalent to the syntax 'two, one' ie 'one(two(..))' (see also 'pipe'):
    [ let f
    [ let g [ g, f ] ]],

#def pipe::
#    [ let f
#    [ let g
#        [ let a [g [f a]] ]]],

def const:
    always evaluate to its first argument, ignoring its second one:
    [ let a
    [ let b a ]],

def pair::
    [ let a
    [ let b a=b ]],

#def unpair::
#    [ let a=b
#    [ let f
#        f a b ]],

def curry:
    TODO doc:
    [ let f
    [ let a=b [ f a b ] ]],

#def uncurry::
#    [pair, f],

def uncons::
    [ let {h,, t} # breaks sy-hi
        h=t
        [panic: empty list:] ],

def duple:
    returns a pair with twice the same value (essentially 'clone'):
    [let a a=a],

def none:: {},
def some:: [let a {a}],
def singleton:?: some,
def empty:: {},

def inc:: [add 1],
def dec:: [sub 1],

def enumerate-from:
    enumerate a list into a list of (index, value), starting from a given value for index (but still from the start of the list):
    [ let k
    [ let {h,, t}
        {k=h,, [enumerate-from [inc k] t]}
        {} ]],

def enumerate:
    enumerate a list into a list of (index, value):
    [ enumerate-from 0 ],

#def true: returns always true: [const 1],
#def false: returns always false: [const 0],
def not: negates a boolean value: [let 0 1 0],

def flip:
    flip the order in which the parameters are needed:
    [ let f
        [ let b
        [ let a [f a b] ]]],

def fold:
    TODO doc:
    [ let f
    [ let v
        [ let {h,, t}
            [fold f [f v h] t]
            v ]]],

def fst: retrieve the first element: [let a=b a unreachable],
def snd: retrieve the second element: [let a=b b unreachable],

def head: return the first item of the list: [let {h,, t} h [panic: empty list:]],
def tail: return all after the first item: [let {h,, t} t [panic: empty list:]],

def unwrap:
    returns the contained value if any, panics otherwise (see is-none/is-some):
    head,

def is-none: true if there is no contained value: [len, not],
def is-some: true if there is a contained value: [is-none, not],

def id: identity function: [let a a],

def iterate: (a -> a) -> a -> [a]+
    create an infinite list where
    * the first item is given,
    * the second is calculated by applying the function on it,
    * the third item by applying the function on the previous result
    and so on:
    [ let f
    [ let v
        {v,, [f v, iterate f]} ]],

def len:
    computes the length of the list, or string by coercion:
    [ let {h,, t}
        #[len t, inc] FIXME: doesn't give the same result tho it should
        #                    there is a test that might be about this (parsing-39)
        [inc [len t]]
        0 ],

#def if:
#    if condition consequence alternative:
#    # not sure tho
#    [let 0 fst snd, flip apply pair],

#def zip:: [zipwith pair],

#def uints:: [iterate [add1] 0],
#def enumerate:: [zip uints],

#def sum:
#    sum the elements:
#    [fold add 0],


# ---
# def ln:: cat {10},
#
# [:size:: :, cat-num 42, cat-str :name:: :, cat-str name, ln], print-or-whever
# {:size:: :, 42, :name:: :, name}, cat, ln, print-or-whever
#
# def cat: (has to be builtin): # Str+1 -> Str+2 -> Str+1|2
# def cat-num: not actually needed 'cause of auto tostr: [tostr, cat],
# def cat-str: not actually needed 'cause just same as cat: cat,
# def cat-hex: same as cat-num, but as hex: [hex, cat],
